// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package myfirstmodule.actions;

import com.mendix.core.Core;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import java.io.InputStream;
import java.math.BigDecimal;
import java.text.SimpleDateFormat;
import java.util.*;

public class ExcelUpload extends CustomJavaAction<java.lang.Void>
{
	/** @deprecated use Parameter.getMendixObject() instead. */
	@java.lang.Deprecated(forRemoval = true)
	private final IMendixObject __Parameter;
	private final myfirstmodule.proxies.ExcelFileDoc Parameter;

	public ExcelUpload(
		IContext context,
		IMendixObject _parameter
	)
	{
		super(context);
		this.__Parameter = _parameter;
		this.Parameter = _parameter == null ? null : myfirstmodule.proxies.ExcelFileDoc.initialize(getContext(), _parameter);
	}

	@java.lang.Override
	public java.lang.Void executeAction() throws Exception
	{
		// BEGIN USER CODE

        InputStream inputStream = Core.getFileDocumentContent(getContext(), Parameter.getMendixObject());

        // ✅ 기존 Orders 데이터 전체 삭제
        List<IMendixObject> existingOrders = Core.retrieveXPathQuery(getContext(), "//MyFirstModule.Orders");
        if (!existingOrders.isEmpty()) {
            Core.delete(getContext(), existingOrders);
            Core.getLogger("ExcelUpload").info("기존 Orders 데이터 " + existingOrders.size() + "건 삭제 완료.");
        }

        List<IMendixObject> orders = new ArrayList<>();
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

        try (Workbook workbook = new XSSFWorkbook(inputStream)) {
            Sheet sheet = workbook.getSheetAt(0);

            for (Row row : sheet) {
                if (row.getRowNum() == 0) continue; // 헤더 스킵

                try {
                    // 이름
                    String name = getStringCellValue(row.getCell(0));

                    // 구매일
                    Date purchaseDate = parseDate(row.getCell(1), dateFormat);
//                    Date purchaseDate = null;
//                    Cell dateCell = row.getCell(1);
//                    if (dateCell != null) {
//                        if (dateCell.getCellType() == CellType.NUMERIC) {
//                            purchaseDate = dateCell.getDateCellValue();
//                        } else if (dateCell.getCellType() == CellType.STRING) {
//                            purchaseDate = dateFormat.parse(dateCell.getStringCellValue().trim());
//                        }
//                    }

                    // 결제여부
                    boolean isPaid = parseBoolean(row.getCell(2));
//                    boolean isPaid = false;
//                    Cell paidCell = row.getCell(2);
//                    if (paidCell != null) {
//                        if (paidCell.getCellType() == CellType.BOOLEAN) {
//                            isPaid = paidCell.getBooleanCellValue();
//                        } else if (paidCell.getCellType() == CellType.NUMERIC) {
//                            isPaid = paidCell.getNumericCellValue() == 1.0;
//                        } else if (paidCell.getCellType() == CellType.STRING) {
//                            String val = paidCell.getStringCellValue().trim();
//                            if (val.equals("1")) {
//                                isPaid = true;
//                            } else if (val.equalsIgnoreCase("true")) {
//                                isPaid = true;
//                            }
//                        }
//                    }

                    // 상품명
                    String productName = getStringCellValue(row.getCell(3));

                    // 가격
                    double priceRaw = getDoubleCellValue(row.getCell(4));
                    BigDecimal price = BigDecimal.valueOf(priceRaw);

                    // 수량
                    int quantity = (int) getDoubleCellValue(row.getCell(5));

                    // Mendix 오브젝트 생성
                    IMendixObject order = Core.instantiate(getContext(), "MyFirstModule.Orders");
                    order.setValue(getContext(), "Name", name);
                    order.setValue(getContext(), "PurchaseDate", purchaseDate);
                    order.setValue(getContext(), "IsPaid", isPaid);
                    order.setValue(getContext(), "ProductName", productName);
                    order.setValue(getContext(), "Price", price);
                    order.setValue(getContext(), "Quantity", quantity);

                    orders.add(order);

                } catch (Exception e) {
                    Core.getLogger("ExcelUpload").warn("행 파싱 중 오류 발생: " + e.getMessage());
                }
            }

            // 전체 커밋
            if (!orders.isEmpty()) {
                Core.commit(getContext(), orders);
                Core.getLogger("ExcelUploadSUCCESS").info("총 " + orders.size() + "개의 주문이 저장되었습니다.");
            }
        }

        return null;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "ExcelUpload";
	}

	// BEGIN EXTRA CODE

    private String getStringCellValue(Cell cell) {
        if (cell == null) return "";
        if (cell.getCellType() == CellType.STRING) {
            return cell.getStringCellValue().trim();
        } else if (cell.getCellType() == CellType.NUMERIC) {
            return String.valueOf(cell.getNumericCellValue()).trim();
        } else if (cell.getCellType() == CellType.BOOLEAN) {
            return String.valueOf(cell.getBooleanCellValue()).trim();
        }
        return "";
    }

    private double getDoubleCellValue(Cell cell) {
        if (cell == null) return 0;
        if (cell.getCellType() == CellType.NUMERIC) {
            return cell.getNumericCellValue();
        } else if (cell.getCellType() == CellType.STRING) {
            String val = cell.getStringCellValue().replaceAll("[^\\d.]", "");
            if (!val.isEmpty()) return Double.parseDouble(val);
        }
        return 0;
    }

    private Date parseDate(Cell dateCell, SimpleDateFormat dateFormat) {
        if (dateCell == null) return null;

        try {
            if (dateCell.getCellType() == CellType.NUMERIC) {
                return dateCell.getDateCellValue();
            } else if (dateCell.getCellType() == CellType.STRING) {
                return dateFormat.parse(dateCell.getStringCellValue().trim());
            }
        } catch (Exception e) {
            Core.getLogger("ExcelUpload").warn("날짜 파싱 실패: " + e.getMessage());
        }

        return null;
    }


    private boolean parseBoolean(Cell booleanCell) {
        if (booleanCell == null) return false;

        try {
            switch (booleanCell.getCellType()) {
                case BOOLEAN:
                    return booleanCell.getBooleanCellValue();

                case NUMERIC:
                    return booleanCell.getNumericCellValue() == 1.0;

                case STRING:
                    String val = booleanCell.getStringCellValue().trim();
                    return val.equals("1") || val.equalsIgnoreCase("true");
            }
        } catch (Exception e) {
            Core.getLogger("ExcelUpload").warn("결제여부 파싱 실패: " + e.getMessage());
        }

        return false;
    }


	// END EXTRA CODE
}
