5 멘딕스 흐름 구조

멘딕스를 처음부터 끝까지 사용하는 전체적인 흐름(Flow) 관점에서, 아래의 구성 요소들을 차례로 설명해 드릴게요. 쉽게 말하면, 어떻게 Mendix 앱이 만들어지고 동작하는가를 이해할 수 있는 구조입니다.
✅ 1. App – 전체 애플리케이션의 시작점
하나의 Mendix 프로젝트입니다.
여러 기능, 사용자, 페이지 등을 포함하는 전체 컨테이너입니다.
예: 쇼핑몰 앱, 교육 신청 앱, 고객 관리 앱 등
👉 흐름 기준: 개발자가 먼저 "New App"을 생성하여 전체 구조를 잡습니다.
✅ 2. Module – 앱을 기능 단위로 나눈 묶음
앱 내부에서 기능별로 나눈 서브 단위입니다.
각각의 Module은 독립적인 구조(도메인 모델, 마이크로플로우, 페이지 등)를 가질 수 있습니다.
예: "회원관리", "상품관리", "주문관리" 같은 기능 단위 모듈
👉 흐름 기준: 앱 내에서 기능별로 모듈을 나눠서 관리하며, 재사용성도 높입니다.
✅ 3. Domain Model – 데이터 구조 정의
데이터베이스에 저장될 **엔티티(테이블)**와 속성(컬럼)을 정의합니다.
관계(1:N, N:M 등), 제약조건 등도 설정할 수 있습니다.
예: User, Product, Order 같은 엔티티 정의
👉 흐름 기준: 데이터를 먼저 설계해서 앱이 어떤 정보를 다루는지 정의합니다.
✅ 4. Page – 사용자 인터페이스(UI)
사용자가 실제로 보는 화면입니다.
테이블 목록, 입력폼, 버튼, 차트 등을 배치합니다.
데이터와 직접 연결되며, 동작은 마이크로플로우를 호출할 수 있습니다.
👉 흐름 기준: 사용자가 앱에서 보게 될 UI를 디자인합니다.
✅ 5. Microflow / Nanoflow – 로직 처리
Microflow: 서버에서 실행되는 복잡한 로직 (DB 저장, 조건 분기, 호출 등)
Nanoflow: 클라이언트에서 빠르게 실행되는 간단한 로직 (주로 모바일, 오프라인 등)
버튼 클릭 시 어떤 동작을 할지 정의하는 곳입니다.
👉 흐름 기준: 페이지와 데이터 사이의 로직을 연결합니다. (예: 버튼 클릭 → 데이터 저장)
✅ 6. Navigation & Role – 접근 제어 및 메뉴 구성
어떤 사용자가 어떤 페이지에 접근할 수 있는지 역할(Role) 설정
상단 메뉴, 하위 메뉴 등 전체 앱의 네비게이션 구조를 설정
예: Admin은 모든 페이지, 일반 사용자는 본인 정보만 보기 가능
👉 흐름 기준: 페이지와 사용자 권한을 연결하고, 사용자별 동선을 정의합니다.
✅ 7. Use Code (Java / JavaScript) – 커스터마이징
Mendix 기본 기능으로 할 수 없는 경우, 직접 코드를 작성할 수 있습니다.
Java: Microflow Custom Action
JavaScript: Nanoflow Custom Activity
예: 엑셀 파싱, 외부 API 호출, 복잡한 수학 계산 등
👉 흐름 기준: 표준 기능으로 부족할 때 확장/보완하는 도구입니다.
🔁 종합 흐름 요약
App을 만든다 →
기능별로 Module을 나눈다 →
Domain Model로 데이터 구조를 만든다 →
Page를 만들어 UI를 설계한다 →
Microflow/Nanoflow로 버튼과 로직을 연결한다 →
Navigation & Role로 사용자 메뉴와 권한을 설정한다 →
부족한 부분은 Use Code로 확장한다
