10 Mendix Domain Model의 개념 (일반버전)

Mendix에서 Domain Model은 애플리케이션의 데이터 구조를 설계하는 핵심 개념입니다. 쉽게 말해, 앱에서 다룰 데이터(정보)와 그 데이터 간의 관계를 시각적으로 표현한 모델이라고 볼 수 있어요.
Mendix Domain Model의 주요 개념
엔티티(Entity)
데이터의 한 종류(테이블 개념)
예: 고객(Customer), 주문(Order), 제품(Product) 같은 것들
각 엔티티는 속성(Attributes)을 가질 수 있어요.
속성(Attribute)
엔티티가 가지는 데이터 항목(컬럼 개념)
예: 고객 엔티티에 이름, 이메일, 생년월일 같은 속성들이 있을 수 있음
속성은 데이터 타입(문자열, 정수, 날짜 등)을 가짐
연관(Association)
엔티티 간의 관계를 나타냄
예: 고객과 주문은 1:N(한 고객이 여러 주문을 가짐) 관계일 수 있음
Mendix에서는 연관 설정 시 "참조"와 "컬렉션" 같은 관계 유형을 설정할 수 있음
역할(Role)
연관된 엔티티가 관계에서 맡는 역할 이름
예: 고객이 주문에서 “주문자” 역할을 한다거나
속성 제약조건(Constraints)
필수 입력 여부, 유일성(Unique) 등의 데이터 제약조건을 설정 가능
Mendix Domain Model의 특징
시각적 모델링: 드래그 앤 드롭 방식으로 쉽게 설계할 수 있어 개발이 직관적임
자동 데이터베이스 매핑: 설계한 도메인 모델을 기반으로 Mendix가 데이터베이스 스키마를 자동 생성함
엔티티 간 복잡한 관계 표현 가능: 1:1, 1:N, N:M 관계 모두 표현 가능
비즈니스 로직과 연결: 도메인 모델을 통해 생성된 데이터를 Mendix의 마이크로플로우, 페이지 등과 연동하여 비즈니스 로직 구현 가능
간단한 예시
고객(Customer)
이름(String), 이메일(String)
주문(Order)
주문번호(String), 주문날짜(Date)
고객과 주문은 1:N 관계 (한 고객은 여러 주문 가능)
이런 구조를 Mendix Domain Model로 설계하면, 앱에서 고객과 주문 데이터를 쉽게 관리하고 처리할 수 있어요.


Mendix Domain Model이란?
Domain Model은 앱이 다루는 데이터(정보)의 뼈대(구조)를 만드는 곳이야.
쉽게 말해, 앱에서 사용할 ‘데이터의 종류’와 ‘데이터 간 관계’를 그리는 그림이라고 보면 돼.
왜 Domain Model이 중요할까?
앱은 결국 데이터를 저장하고, 불러오고, 수정하고 보여줘야 하잖아?
이때 어떤 데이터를 저장할지, 데이터끼리 어떻게 연결되는지 정하는 게 바로 Domain Model이야.
이걸 잘 설계해야 앱이 원하는 기능을 제대로 만들 수 있어.
Domain Model의 핵심 요소
엔티티(Entity): 데이터 종류
예) 고객, 주문, 상품 같은 ‘정보 단위’
각각이 하나의 데이터 덩어리(표 하나, 객체 하나라고 생각하면 됨)
속성(Attribute): 데이터 세부 내용
엔티티가 가지는 정보 항목
예) 고객 엔티티 안에는 이름, 이메일, 전화번호 같은 속성이 있음
연관(Association): 엔티티 간 연결
예) 고객과 주문은 연결되어 있음 (한 고객이 여러 주문을 할 수 있음)
이런 관계를 표시하는 선 같은 것
Domain Model 만드는 흐름
앱에서 필요한 데이터가 뭔지 생각하기
예) 사용자, 상품, 주문, 결제 정보 등
각각 데이터 종류(엔티티) 만들기
고객, 주문, 상품 같은 엔티티 생성
엔티티에 필요한 속성 추가하기
이름, 가격, 날짜 등 구체적인 데이터 항목 추가
엔티티끼리 관계 만들기
고객과 주문은 1:N 관계, 주문과 상품은 N:M 관계 등
완성된 Domain Model을 기반으로 앱에서 데이터 다루기 시작
정리하자면
Domain Model은 앱의 데이터 설계도
앱이 어떤 정보를 저장하고, 그 정보가 어떻게 연결될지 보여주는 ‘지도’ 같은 역할
Mendix에서는 이걸 시각적으로 쉽게 만들 수 있어서, 데이터 구조를 이해하기 쉽고 빠르게 개발 가능
